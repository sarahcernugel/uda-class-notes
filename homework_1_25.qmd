---
title: "Homework 1"
author: "Sarah Cernugel"
format:
  html:
    toc: true
    toc-location: left
    self-contained: true
jupyter: python3
---

Professional wrestling, while not everyone's cup of tea, is big business. What started as a carnival act has turned into a global entertainment industry. Netflix recently started showing Monday Night Raw, a program from the biggest North American wrestling company, WWE -- this deal is reportedly worth \$5 billion. Like any large entity, WWE is not without competition, drama, and scandal. 

## General Tips

This is very much a step-by-step process. Don't go crazy trying to get everything done with as few lines as possible. Read the documentation for the AlphaVantage api! Carefully explore the pages from cagematch. There isn't a need to get too fancy with anything here -- just go with simple function and all should be good. Don't print comments, but use normal text for explanations.

## Step 1

In the `calls` folder, you'll find 4 text files -- these are transcripts from quarterly earnings calls. Read those files in (glob.glob will be very helpful here), with appropriate column names for ticker, quarter, and year columns; this should be done within a single function. Perform any data cleaning that you find necessary. 

```{python}
import glob as glob
import pandas as pd

def wwe_calls():
  files = glob.glob("/Users/sarahcernugel/uda-class-notes/calls/*")

  data = []

  for file in files:
    filename = file.split('/')[-1]
    ticker, quarter, year = filename.split('_')[0], filename.split('_')[1], filename.split('_')[2].split('.')[0]

    data_wwe = pd.read_table(file)

    data_wwe['ticker'] = ticker
    data_wwe['quarter'] = quarter
    data_wwe['year'] = year

    data.append(data_wwe)

  df = pd.concat(data, ignore_index=True)
  return df

check_df = wwe_calls()
print(check_df)
```

## Step 2

Use the AlphaVantage api to get daily stock prices for WWE and related tickers for the last 5 years -- pay attention to your data. You cannot use any AlphaVantage packages (i.e., you can only use requests to grab the data). Tell me about the general trend that you are seeing. I don't care which viz package you use, but plotly is solid and plotnine is good for ggplot2 users.

```{python}
import requests 
import plotly.express as px
import plotly.io as pio
import nbformat

url = 'https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=WWE&outputsize=full&apikey=WPP4DPSKZ7JJRC9L'
r = requests.get(url)
data = r.json()

tko_url = 'https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=TKO&outputsize=full&apikey=WPP4DPSKZ7JJRC9L'
r2 = requests.get(tko_url)
tko_data = r2.json()

daily_wwe_data = data['Time Series (Daily)']
daily_tko_data = tko_data['Time Series (Daily)']
print(daily_wwe_data)

wwe_stock = pd.DataFrame.from_dict(daily_wwe_data, orient='index')
wwe_stock.columns = ['Open', 'High', 'Low', 'Close', 'Volume']
wwe_stock.index = pd.to_datetime(wwe_stock.index)

tko_stock = pd.DataFrame.from_dict(daily_tko_data, orient='index')
tko_stock.columns = ['Open', 'High', 'Low', 'Close', 'Volume']
tko_stock.index = pd.to_datetime(tko_stock.index)

wwe_stock = wwe_stock.astype({'Open': float, 'High': float, 'Low': float, 'Close': float, 'Volume': int})
tko_stock = tko_stock.astype({'Open': float, 'High': float, 'Low': float, 'Close': float, 'Volume': int})

stock_prices = pd.concat([wwe_stock, tko_stock], keys = ['WWE', 'TKO'], names = ['Ticker'])

print(stock_prices)

#print(combined_data)

#fig = px.line(combined_data, x = combined_data.index, y = ['WWE Close', 'TKO Close'], title = 'WWE Daily Closing Prices (1999-2023)')

#plot_data = combined_data[['WWE Close', 'TKO Close']].reset_index()

#fig = px.line(combined_data, x = 'date', y = ['WWE Close', 'TKO Close'],
#              title='WWE and TKO Daily Closing Prices (1999-2023)',
#              labels={'date': 'Date', 'value': 'Closing Price (USD)', 'variable': 'Stock'},
#              color='variable')

#fig = px.line(wwe_stock, x = wwe_stock.index, y = 'close', title = 'WWE Daily Closing Prices (1999-2023)')

#pio.renderers.default = 'browser'

#fig.show()
```

## Step 3

Just like every other nerdy hobby, professional wrestling draws dedicated fans. Wrestling fans often go to cagematch.net to leave reviews for matches, shows, and wrestlers. The following link contains the top 100 matches on cagematch: https://www.cagematch.net/?id=111&view=statistics

* What is the correlation between WON ratings and cagematch ratings?
  0.2172362283628634

** Which wrestler has the most matches in the top 100?
  Kenta Kobashi and Kenny Omega with 15 each

*** Which promotion has the most matches in the top 100?


**** What is each promotion's average WON rating?

***** Select any single match and get the comments and ratings for that match into a data frame.

```{python}
from bs4 import BeautifulSoup
import pandas as pd
import re
import requests

url = 'https://www.cagematch.net/?id=111&view=statistics'
response = requests.get(url)
soup = BeautifulSoup(response.content, 'html.parser')
table = soup.find('table')

rows = table.find_all('tr')

table_data = []

for row in rows[1:]:
    columns = row.find_all(['td', 'th'])

    img_tag = row.find('img')
    promotion_name = img_tag.get('alt') if img_tag else ''

    columns = [col.get_text(strip=True) for col in columns]
    columns[2] = promotion_name

    table_data.append(columns)

ranking_data = pd.DataFrame(table_data)

ranking_data.columns = ['#', 'Date', 'Promotion', 'Match fixture', 'WON', 'Match Type', 'Rating', 'Votes']

ranking_data['WON'] = ranking_data['WON'].astype(str)

def count_of_stars(rating):
    star_count = rating.count('*')

    fraction_match = re.search(r'(\d+)/(\d+)', rating)
    if fraction_match:
        numerator = int(fraction_match.group(1))
        denominator = int(fraction_match.group(2))
        fraction = numerator / denominator
        return star_count + fraction
    else:
        return star_count

ranking_data['WON'] = ranking_data['WON'].apply(count_of_stars)

print(ranking_data)

correlation = ranking_data['WON'].corr(ranking_data['Rating'])

print(correlation)
```

```{python}
from bs4 import BeautifulSoup
import pandas as pd
import re

wrestlers = []

for match in ranking_data['Match fixture']:
 
    names = re.split(r'[,&]|\s+vs\.', match)
    wrestlers.extend([name.strip() for name in names])

name_count = names_series.value_counts()

name_count_df = pd.DataFrame(name_count).reset_index()
name_count_df.columns = ['Wrestler', 'Count']

name_count_df = name_count_df.sort_values(by='Count', ascending=False).reset_index(drop=True)

print(name_count_df)
```

```{python}

```

```{python}

```

```{python}
url = 'https://www.cagematch.net/?id=111&view=statistics'

```

## Step 4

You can't have matches without wrestlers. The following link contains the top 100 wrestlers, according to cagematch: https://www.cagematch.net/?id=2&view=statistics

*** Of the top 100, who has wrestled the most matches?

***** Of the top 100, which wrestler has the best win/loss?

```{python}
url = 'https://www.cagematch.net/?id=2&view=statistics'
base_url = 'https://www.cagematch.net'
response = requests.get(url)
soup = BeautifulSoup(response.content, 'html.parser')
table = soup.find('table')
rows = table.find_all('tr')
table_data = []

for row in table.find_all('tr')[1:]:
    columns = row.find_all('td')
    if len(columns) > 1:
      link_tag = columns[1].find('a')
      if link_tag and link_tag.get('href'):

    
```

## Step 5

With all of this work out of the way, we can start getting down to strategy.

First, what talent should WWE pursue? Advise carefully.

Second, reconcile what you found in steps 3 and 4 with Netflix's relationship with WWE. Use the data from the following page to help make your case: https://wrestlenomics.com/tv-ratings/

Third, do you have any further recommendations for WWE?